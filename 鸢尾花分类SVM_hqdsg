#一.导入要用到的包 
import numpy as np                
from matplotlib import colors     
from sklearn import svm            
from sklearn.svm import SVC
from sklearn import model_selection
import matplotlib.pyplot as plt
import matplotlib as mpl
#**********************
#二.数据准备
#转换函数
#将鸢尾花类别名称由字符串换成整形 ,方便数据加载
def iris_type(s):
    it = {b'Iris-setosa':0,b'Iris-versicolor':1,b'Iris-virginica':2}
    return it[s]

#数据加载
#路径不会写，写了老错，问了张浩宇，用这个简单，用sklearn里的datasets引入鸢尾花数据集
from sklearn.datasets import load_iris
iris=load_iris()
x=iris.data
y=iris.target

print(x)
#划分训练集和测试集 训练和测试的数据7：3
x_train,x_test,y_train,y_test=model_selection.train_test_split(x,              #所要划分的样本特征集
                                                               y,              #所要划分的样本结果
                                                               random_state=1, #随机数种子
                                                               test_size=0.3)  #测试样本占比
#**********************
#三.模型搭建
#SVM分类器构建 
def classifier():
    clf = svm.SVC(C=0.5,                            #惩罚系数，偏移之后变换偏转的幅度，对误分类的容错程度，C越大越准确，容错程度低
                 kernel='linear',                   #核函数 linear="rbf"，高斯核
                 decision_function_shape='ovr')     #决策函数
    return clf

#定义SVM模型，换个名字
clf = classifier()

#**********************
#四.训练模型
#训练模型取的数据集是一部分的，多训练取的数据多
#定义训练的模型
def train(clf,x_train,y_train):
    clf.fit(x_train,             #训练集特征向量
            y_train.ravel())     #训练集目标值

#训练模型
train(clf,x_train,y_train)

#**********************
#五.模型评估，计算预测的准确率

#判断a和b是否相等 计算acc的均值 相等的个数相对整体的个数 准确率
def show_accuracy(a, b, tip):
    acc = a.ravel() == b.ravel()
    print('%s Accuracy:%.3f' %(tip, np.mean(acc)))
    
#打印 准确率，模型割线到各个割面的距离
def print_accuracy(clf,x_train,y_train,x_test,y_test):
    #分别打印训练集和测试集的准确率  score(x_train,y_train):表示输出x_train,y_train在模型上的准确率
    print('trianing prediction:%.3f' %(clf.score(x_train, y_train)))
    print('test data prediction:%.3f' %(clf.score(x_test, y_test)))
    #原始结果与预测结果进行对比   predict()表示对x_train样本进行预测，返回样本类别
    show_accuracy(clf.predict(x_train), y_train, 'traing data')
    show_accuracy(clf.predict(x_test), y_test, 'testing data')
    #计算决策函数的值，表示x到各分割平面的距离
    print('decision_function:\n', clf.decision_function(x_train))

#模型评估
print_accuracy(clf,x_train,y_train,x_test,y_test)

#**********************
#使用模型，对数据集分类做散点图 上面用的是四个特征 不能做平面的散点图
#通过决策函数计算割线距离各个割面的位置 划分不同种类的区域 用训练集结果选择点的颜色

def draw(clf, x):
    iris_feature = 'sepal length', 'sepal width', 'petal lenght', 'petal width'
    # 开始画图
    x1_min, x1_max = x[:, 0].min(), x[:, 0].max()               #第0列的范围
    x2_min, x2_max = x[:, 1].min(), x[:, 1].max()               #第1列的范围
    x1, x2 = np.mgrid[x1_min:x1_max:200j, x2_min:x2_max:200j]   #生成网格采样点
    grid_test = np.stack((x1.flat, x2.flat), axis=1)            #stack():沿着新的轴加入一系列数组
    print('grid_test:\n', grid_test)
    # 输出样本到决策面的距离
    z = clf.decision_function(grid_test)
    print('the distance to decision plane:\n', z)
    
    grid_hat = clf.predict(grid_test)                           # 预测分类值 得到【0,0.。。。2,2,2】
    print('grid_hat:\n', grid_hat)  
    grid_hat = grid_hat.reshape(x1.shape)                       # reshape grid_hat和x1形状一致
                                                                #若3*3矩阵e，则e.shape()为3*3,表示3行3列   
 
    cm_light = mpl.colors.ListedColormap(['#A0FFA0', '#FFA0A0', '#A0A0FF'])
    cm_dark = mpl.colors.ListedColormap(['g', 'b', 'r'])
 
    plt.pcolormesh(x1, x2, grid_hat, cmap=cm_light)                                   # pcolormesh(x,y,z,cmap)这里参数代入
                                                                                      # x1，x2，grid_hat，cmap=cm_light绘制的是背景。
    plt.scatter(x[:, 0], x[:, 1], c=np.squeeze(y), edgecolor='k', s=50, cmap=cm_dark) # 样本点
    plt.scatter(x_test[:, 0], x_test[:, 1], s=120, facecolor='none', zorder=10)       # 测试点
    plt.xlabel(iris_feature[0], fontsize=20)
    plt.ylabel(iris_feature[1], fontsize=20)
    plt.xlim(x1_min, x1_max)
    plt.ylim(x2_min, x2_max)
    plt.title('svm in iris data classification', fontsize=30)
    plt.grid()
    plt.show()
    
